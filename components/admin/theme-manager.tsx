"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { useToast } from "@/components/ui/use-toast"
import type { Theme } from "@/lib/types"
import { getThemes, createTheme, updateTheme, deleteTheme } from '@/lib/supabase/themes'
import { EmojiPicker } from "@/components/admin/emoji-picker"
import { Pencil, Plus, Trash2 } from "lucide-react"
import { useResponsive } from "@/hooks/use-responsive" // Replace useMobile with useResponsive

export function ThemeManager() {
  const [themes, setThemes] = useState<Theme[]>([])
  const [loading, setLoading] = useState(true)
  const [formMode, setFormMode] = useState<"create" | "edit" | null>(null)
  const [currentTheme, setCurrentTheme] = useState<Theme | null>(null)
  const [name, setName] = useState("")
  const [emoji, setEmoji] = useState("üí°")
  const [description, setDescription] = useState("")
  const [gradientClass, setGradientClass] = useState("gradient-1")
  const { toast } = useToast()
  const { isMobile } = useResponsive() // Replace useMobile() with useResponsive()

  useEffect(() => {
    loadThemes()
  }, [])

  const loadThemes = async () => {
    try {
      const data = await getThemes()
      setThemes(data)
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }

  const resetForm = () => {
    setName("")
    setEmoji("üí°")
    setDescription("")
    setGradientClass("gradient-1")
    setCurrentTheme(null)
    setFormMode(null)
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã
  const handleCreateTheme = () => {
    console.log("Creating new theme...")
    setName("")
    setEmoji("üí°")
    setDescription("")
    setGradientClass("gradient-1")
    setCurrentTheme(null)
    setFormMode("create") // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è
  }

  const handleEditTheme = (theme: Theme) => {
    setFormMode("edit")
    setCurrentTheme(theme)
    setName(theme.name)
    setEmoji(theme.emoji)
    setDescription(theme.description || "")
    setGradientClass(theme.gradient_class || "gradient-1")
  }

  const handleDeleteTheme = async (id: string) => {
    if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç–µ–º—É? –≠—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —ç—Ç–æ–π —Ç–µ–º–µ.")) {
      return
    }

    try {
      await deleteTheme(id)
      toast({
        title: "–¢–µ–º–∞ —É–¥–∞–ª–µ–Ω–∞",
        description: "–¢–µ–º–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
      })
      loadThemes()
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º—ã",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        variant: "destructive",
      })
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    console.log("Submitting form...")

    if (!name.trim() || !emoji.trim()) {
      toast({
        title: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
        variant: "destructive",
      })
      return
    }

    try {
      const themeData = {
        name: name.trim(),
        emoji: emoji.trim(),
        description: description.trim() || null,
        gradient_class: gradientClass,
      }

      console.log('Theme data before save:', themeData)
      let result;
      
      if (formMode === "create") {
        result = await createTheme(themeData)
      } else if (formMode === "edit" && currentTheme) {
        result = await updateTheme(currentTheme.id, themeData)
      }

      console.log('Response from server:', result)

      if (!result) {
        throw new Error('Failed to save theme')
      }

      if (formMode === "create") {
        setThemes(prev => [...prev, result])
      } else if (formMode === "edit") {
        setThemes(prev => prev.map(theme => 
          theme.id === currentTheme?.id ? result : theme
        ))
      }

      toast({
        title: formMode === "create" ? "–¢–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞" : "–¢–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        description: formMode === "create" 
          ? "–¢–µ–º–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞" 
          : "–¢–µ–º–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
      })
      
      resetForm()
    } catch (error: any) {
      console.error('Error details:', error)
      toast({
        title: `–û—à–∏–±–∫–∞ ${formMode === "create" ? "—Å–æ–∑–¥–∞–Ω–∏—è" : "–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"} —Ç–µ–º—ã`,
        description: error.message || "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
        variant: "destructive",
      })
    }
  }

  if (loading) {
    return <div className="text-center py-12">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º...</div>
  }

  return (
    <div className="space-y-8">
      {formMode ? (
        <Card>
          <CardHeader>
            <CardTitle>{formMode === "create" ? "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É" : "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—É"}</CardTitle>
            <CardDescription>
              {formMode === "create" ? "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é" : "–û–±–Ω–æ–≤–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É"}
            </CardDescription>
          </CardHeader>
          <form onSubmit={handleSubmit}>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã</Label>
                <Input
                  id="name"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã"
                  required
                />
              </div>

              <div className="space-y-2">
                <Label>–≠–º–æ–¥–∑–∏</Label>
                <EmojiPicker selectedEmoji={emoji} onEmojiSelect={setEmoji} />
              </div>

              <div className="space-y-2">
                <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Label>
                <Textarea
                  id="description"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã"
                  rows={3}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="gradient">–§–æ–Ω–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç</Label>
                <Select value={gradientClass} onValueChange={setGradientClass}>
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="gradient-1">–†–æ–∑–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç</SelectItem>
                    <SelectItem value="gradient-2">–°–∏–Ω–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç</SelectItem>
                    <SelectItem value="gradient-3">–û—Ä–∞–Ω–∂–µ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç</SelectItem>
                    <SelectItem value="gradient-4">–ë–∏—Ä—é–∑–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç</SelectItem>
                    <SelectItem value="gradient-5">–ó–µ–ª–µ–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç</SelectItem>
                    <SelectItem value="gradient-6">–§–∏–æ–ª–µ—Ç–æ–≤–æ-—Ä–æ–∑–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç</SelectItem>
                    <SelectItem value="gradient-7">–û—Ä–∞–Ω–∂–µ–≤–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç</SelectItem>
                    <SelectItem value="gradient-8">–§–∏–æ–ª–µ—Ç–æ–≤–æ-—Å–∏–Ω–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç</SelectItem>
                  </SelectContent>
                </Select>

                <div className={`${gradientClass} h-12 rounded-md mt-2`}></div>
              </div>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline" type="button" onClick={resetForm}>
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button type="submit">{formMode === "create" ? "–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É" : "–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É"}</Button>
            </CardFooter>
          </form>
        </Card>
      ) : (
        <Button onClick={handleCreateTheme}>
          <Plus className="mr-2 h-4 w-4" />
          –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É
        </Button>
      )}

      <div className={`grid grid-cols-1 ${isMobile ? '' : 'md:grid-cols-2 lg:grid-cols-3'} gap-4 md:gap-6`}>
        {themes.map((theme) => (
          <Card key={theme.id} className="overflow-hidden">
            <div className={`${theme.gradient_class || "gradient-1"} p-4 md:p-6`}>
              <div className="text-3xl md:text-4xl mb-2 emoji-style">{theme.emoji}</div>
              <h3 className="font-bold text-base md:text-lg text-white">{theme.name}</h3>
              {theme.description && (
                <p className="text-xs md:text-sm text-white/80 mt-1">{theme.description}</p>
              )}
            </div>
            <CardFooter className="flex flex-col md:flex-row gap-2 p-2 md:py-4">
              <Button 
                variant="outline" 
                size={isMobile ? "sm" : "default"} 
                className="w-full md:w-auto"
                onClick={() => handleEditTheme(theme)}
              >
                <Pencil className="h-4 w-4 mr-1" />
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </Button>
              <Button
                variant="outline"
                size={isMobile ? "sm" : "default"}
                className="w-full md:w-auto text-destructive hover:text-destructive"
                onClick={() => handleDeleteTheme(theme.id)}
              >
                <Trash2 className="h-4 w-4 mr-1" />
                –£–¥–∞–ª–∏—Ç—å
              </Button>
            </CardFooter>
          </Card>
        ))}

        {themes.length === 0 && (
          <div className="col-span-full text-center py-12">
            <p className="text-muted-foreground">–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ç–µ–º—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.</p>
          </div>
        )}
      </div>
    </div>
  )
}

